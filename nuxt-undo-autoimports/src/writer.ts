import { toImports } from 'unimport'
import MagicString from 'magic-string'
import { createWriteStream, readFileSync, writeFileSync } from 'node:fs'
import { parseQuery, parseURL } from 'ufo'
import { pathToFileURL } from 'node:url'

const outputFile = createWriteStream('unimport.js', { flags: 'w' })

outputFile.write(`/* eslint-disable eslint-comments/no-unlimited-disable */
/* eslint-disable */

// generated by nuxt-undo-autoimports
`)

export async function saveTransformation(id, matchedImports, options) {
  if (!id.match(/[\\/]node_modules[\\/]/) && !id.match(/^virtual:/)) {
    const { search } = parseURL(decodeURIComponent(pathToFileURL(id).href))
    const plainId = id.replace(/\?.*/, '')
    const query = parseQuery(search)
    const isVue = (
      id.endsWith('.vue')
      || 'macro' in query
      || ('vue' in query && (query.type === 'template' || query.type === 'script' || 'setup' in query))
    )
    const imports = new MagicString(toImports(matchedImports))
    if (options.cwdAlias) {
      imports.replaceAll(process.cwd(), options.cwdAlias)
    }
    outputFile.write(`// ${plainId}
${imports.toString()}

`)
    if (options.mode === 'log') {
      return
    }
    if (options.mode === 'comment') {
      imports.prepend('/* generated by nuxt-undo-autoimports\n')
      imports.append('\n*/')
    }
    imports.append('\n')
    const sourceFile = readFileSync(plainId, 'utf-8')
    const code = new MagicString(sourceFile)
    if (isVue) {
      code.replace(/(<script[^><]*>)/gm, `$1
${imports.toString()}`)
    } else {
      code.prepend(imports.toString())
    }
    writeFileSync(plainId, code.toString())
  }
}
